rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             firestore.exists(/databases/(default)/documents/admins/$(request.auth.uid));
    }
    
    function isModerator() {
      return isAuthenticated() && 
             (isAdmin() || 
              firestore.exists(/databases/(default)/documents/moderators/$(request.auth.uid)));
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size <= 10 * 1024 * 1024; // 10MB limit
    }

    // Cleanup images - users can upload/read their own cleanup photos
    match /cleanup_images/{userId}/{sessionId}/{imageType} {
      allow read: if isAuthenticated() && 
                     (isOwner(userId) || isModerator());
      
      allow write: if isOwner(userId) && 
                      isValidImageFile() &&
                      imageType in ['before', 'after'] &&
                      // Additional validation for image types
                      (imageType == 'before' || imageType == 'after');
      
      allow delete: if isOwner(userId) || isModerator();
    }

    // Allow nested cleanup images (for multiple photos per session)
    match /cleanup_images/{userId}/{sessionId}/{imageType}/{fileName} {
      allow read: if isAuthenticated() && 
                     (isOwner(userId) || isModerator());
      
      allow write: if isOwner(userId) && 
                      isValidImageFile() &&
                      imageType in ['before', 'after'];
      
      allow delete: if isOwner(userId) || isModerator();
    }

    // Profile images - users can manage their own profile photos
    match /profile_images/{userId}/{fileName} {
      allow read: if isAuthenticated(); // Profile images are publicly readable
      
      allow write: if isOwner(userId) && 
                      isValidImageFile() &&
                      // Stricter size limit for profile images
                      request.resource.size <= 5 * 1024 * 1024; // 5MB limit
      
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Hotspot images - admin/moderator managed
    match /hotspot_images/{hotspotId}/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isModerator() && isValidImageFile();
      
      allow delete: if isModerator();
    }

    // System/admin images
    match /system_images/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isAdmin() && isValidImageFile();
      
      allow delete: if isAdmin();
    }

    // App assets (logos, badges, etc.) - read-only for users
    match /app_assets/{assetPath=**} {
      allow read: if true; // Public read access for app assets
      
      allow write: if isAdmin();
      
      allow delete: if isAdmin();
    }

    // Badge images - read-only for users, managed by admins
    match /badges/{badgeId} {
      allow read: if isAuthenticated();
      
      allow write: if isAdmin() && isValidImageFile();
      
      allow delete: if isAdmin();
    }

    // Achievement images - similar to badges
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      
      allow write: if isAdmin() && isValidImageFile();
      
      allow delete: if isAdmin();
    }

    // Temporary uploads - users can upload temporarily
    match /temp_uploads/{userId}/{fileName} {
      allow read, write: if isOwner(userId) && 
                            isValidImageFile() &&
                            // Temporary files expire after 24 hours
                            request.time < resource.timeCreated + duration.value(86400, 's');
      
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Feedback attachments - users can attach images to feedback
    match /feedback_attachments/{userId}/{feedbackId}/{fileName} {
      allow read: if isOwner(userId) || isModerator();
      
      allow write: if isOwner(userId) && 
                      isValidImageFile() &&
                      // Smaller limit for feedback attachments
                      request.resource.size <= 3 * 1024 * 1024; // 3MB limit
      
      allow delete: if isOwner(userId) || isModerator();
    }

    // Analytics/logs images (for debugging, screenshots, etc.)
    match /analytics/{analyticsId}/{fileName} {
      allow read: if isAdmin();
      
      allow write: if isAdmin() && isValidImageFile();
      
      allow delete: if isAdmin();
    }

    // City-specific images (landmarks, before/after community areas)
    match /city_images/{cityId}/{category}/{fileName} {
      allow read: if isAuthenticated();
      
      allow write: if isModerator() && 
                      isValidImageFile() &&
                      category in ['landmarks', 'community_areas', 'before_after'];
      
      allow delete: if isModerator();
    }

    // User-generated content moderation queue
    match /moderation_queue/{userId}/{contentId}/{fileName} {
      allow read: if isModerator();
      
      allow write: if isAuthenticated() && 
                      isValidImageFile() &&
                      // Content submitted for moderation
                      request.auth.uid == userId;
      
      allow delete: if isModerator();
    }

    // Backup/archive storage - admin only
    match /backups/{backupId}/{fileName} {
      allow read, write: if isAdmin();
    }

    // Export data storage - admin only
    match /exports/{exportId}/{fileName} {
      allow read, write: if isAdmin();
    }

    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}